@page "/"
@using HostApp.Data;
@using HostApp.Services.Contracts;
@inject HttpClient httpclient
@inject IUserService UserService
@inject IGameService gameService

@if (isSelected)
{
    <h2>Quiz : @chosenGameName</h2>
    <hr />
    <h3>All Questions :</h3>
        @foreach (var question in allQuestions)
    {
        <p>@question.Description</p>
        <br />
        
    }


}else if (isAuthenticated)
{
    <h2>welkom, @name</h2>
    <hr />
    <h3>Choose your quiz</h3>

    @foreach (var game in games)
    {

        <button @onclick="() => ChooseQuiz(game)">@game.Title : @game.Description</button>
        <br />
        
    }

}
else
{
    <PageTitle>Login</PageTitle>

    <EditForm Model="userInput" OnValidSubmit="LoginUser">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="form-group">
            <label for="Email">Email</label>
            <InputText id="email" @bind-Value="userInput.Email" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="Password">Password</label>
            <InputText id="password" @bind-Value="userInput.Password" class="form-control"></InputText>
        </div>
        <button type="submit" class="btn btn-primary">Login</button>
        <ValidationSummary />
    </EditForm>
}



@code {
    private User userInput = new User();
    bool isAuthenticated = false;
    bool isSelected = false;
    string name;
    private List<Game> games = new List<Game>();
    private List<Question> allQuestions = new List<Question>();
    string chosenGameName;


    protected async override void OnAfterRender(bool firstRender) // = On Page Load
    {


        var allGames = await gameService.GetGames();
        if (games.Count == 0)
        {
            foreach (var game in allGames)
            {
                foreach (var question in game.Questions)
                {
                    Question quest = new Question
                    {
                        Id = question.Id,
                        Description = question.Description,
                    };
                    allQuestions.Add(quest);

                }
                User admin = new User
                {
                    Id = game.Admin.Id,
                    Name = game.Admin.Name,
                    Email = game.Admin.Email,
                    Password = game.Admin.Password
                };

                Game gm = new Game
                {
                    Id = game.Id,
                    Admin = admin,
                    Title = game.Title,
                    Description = game.Description,
                    //Questions = allQuestions

                };            
                Console.WriteLine(gm.Description);
                games.Add(gm);

            }

        }

    }

    private async void LoginUser()
    {
        var users = await UserService.GetUsers();
        var checkUser = users.Where(u => userInput.Email.Equals(u.Email)).ToList();
        foreach (var user in checkUser)
        {
            if (user.Password.Equals(userInput.Password))
            {
                isAuthenticated = true;
                name = user.Name;

            }
        }
        Console.WriteLine($"{userInput.Email} // {userInput.Password}");
    }

    private void ChooseQuiz(Game game)
    {       
        chosenGameName = game.Title;
        isSelected = true;
        Console.WriteLine($"het is gelukt, id is {game.Id}");
    }
}
